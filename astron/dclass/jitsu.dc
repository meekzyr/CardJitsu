from game.account import Account/AI/UD
from game.objects import AuthManager/UD
from game.objects import DistributedDistrict/AI
from game.player import DistributedPlayer/AI/UD
from game.jitsu import DistributedCardJitsu/AI

typedef uint8 bool;

dclass Account {
  string ACCOUNT_ID db;
  string ACCOUNT_PASSWORD db;
  uint32 PLAYER_ID db;
};

dclass AuthManager : DistributedObject {
  requestAccess() clsend airecv;
  accessResponse(uint8 success);
  requestLogin(string, string, bool) clsend airecv;
};

dclass DistributedDistrict : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedPlayer : DistributedNode {
  setBeltLevel(uint32) required broadcast ownrecv db;
  setWinCount(uint32) required broadcast ownrecv db;
  setName(string) required broadcast db airecv;
  setGameZone(uint32 zoneId) ownrecv;
  queueReady() ownsend airecv;
};

struct JitsuCard {
  uint8 trackId;
  uint8 cardTier;
};

dclass DistributedCardJitsu : DistributedNode {
  setTimer(int16) broadcast ram required;
  cardSelected(uint32 avId, uint8 cardIndex) broadcast;
  roundResult(uint32 winnerId, JitsuCard []) broadcast;
  gameOver(uint8 result, uint32 resultAvId) broadcast;
  startGame(uint32 []) broadcast;
  setOpponentName(string, uint32 skillLevel);
  forcePick();
  receiveCards(JitsuCard []);
  requestSelectCard(uint8 cardIndex, uint8 trackId, uint8 cardTier) clsend airecv;
  requestBegin() clsend airecv;
  requestExit() clsend airecv;
  requestTimer() clsend airecv;
  resultFinished() clsend airecv;
};

