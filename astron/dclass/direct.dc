// This is a sample dc file for some of the classes defined within the
// direct source tree.  It is suggested that you copy this file into
// your own project (or load it from the direct source tree) and build
// on it with your own dc file for your own classes.

from direct.distributed import DistributedObject/AI
from direct.distributed import DistributedObjectGlobal/AI/UD
from direct.distributed import DistributedNode/AI
from direct.distributed import DistributedSmoothNode/AI

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

// The most fundamental class
dclass DistributedObject {
  // These are used to support DistributedObjectAI.beginBarrier() and
  // the matching DistributedObject.doneBarrier().  If you don't call
  // these functions, you don't care about these distributed methods.
  // (Actually, you probably don't care anyway.)
  setBarrierData(BarrierData data[]) broadcast ram;
  setBarrierReady(uint16 context);
  setLocation(uint32 parentId, uint32 zoneId) broadcast ram;
};

dclass DistributedObjectGlobal: DistributedObject {
};


dclass DistributedNode: DistributedObject {
  setX(int16 / 10) broadcast ram ownsend airecv;
  setY(int16 / 10) broadcast ram ownsend airecv;
  setZ(int16 / 10) broadcast ram ownsend airecv;
  setH(int16 % 360 / 10) broadcast ram ownsend airecv;
  setP(int16 % 360 / 10) broadcast ram ownsend airecv;
  setR(int16 % 360 / 10) broadcast ram ownsend airecv;

  setPos: setX, setY, setZ;
  setHpr: setH, setP, setR;
  setPosHpr: setX, setY, setZ, setH, setP, setR;
  setXY: setX, setY;
  setXZ: setX, setZ;
  setXYH: setX, setY, setH;
  setXYZH: setX, setY, setZ, setH;
};

dclass DistributedSmoothNode : DistributedNode {
  setComponentL(uint64 l) broadcast ram ownsend airecv;
  setComponentX(int16/10 x) broadcast ram ownsend airecv;
  setComponentY(int16/10 y) broadcast ram ownsend airecv;
  setComponentZ(int16/10 z) broadcast ram ownsend airecv;
  setComponentH(int16%360/10 h) broadcast ram ownsend airecv;
  setComponentP(int16%360/10 p) broadcast ram ownsend airecv;
  setComponentR(int16%360/10 r) broadcast ram ownsend airecv;
  setComponentT(int16 timestamp) broadcast ram ownsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8 bogus) broadcast ownsend;
  suggestResync(uint32 avId, int16 timestampA, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;
  returnResync(uint32 avId, int16 timestampB, int32 serverTimeSec, uint16 serverTimeUSec, uint16/100 uncertainty) ownrecv clsend;
};
